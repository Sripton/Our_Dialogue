import express, { raw, group } from "express";
import { Op } from "sequelize";
import {
  User,
  Post,
  Postreaction,
  Comment,
  Commentreaction,
  sequelize,
} from "../db/models";
import bcrypt from "bcrypt";
const router = express.Router();

router.post("/signup", async (req, res) => {
  const { login, password, name } = req.body;
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
    const existingUser = await User.findOne({ where: { login } });
    if (existingUser) {
      return res
        .status(400)
        .json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }
    const hashPassword = await bcrypt.hash(password, 10);
    const createUser = await User.create({
      login,
      password: hashPassword,
      name,
    });

    req.session.userID = createUser.id;
    req.session.userName = createUser.name;
    res.json({
      userID: createUser.id,
      userName: createUser.name,
    });
  } catch (error) {
    console.log(error);
  }
});

router.post("/signin", async (req, res) => {
  const { login, password } = req.body;
  try {
    const findUserLogin = await User.findOne({ where: { login } });
    const compareUser = await bcrypt.compare(password, findUserLogin.password);
    if (compareUser) {
      req.session.userID = findUserLogin.id;
      req.session.userName = findUserLogin.name;
      res.json({ userID: findUserLogin.id, userName: findUserLogin.name });
    }
  } catch (error) {
    console.log(error);
  }
});

router.get("/logout", (req, res) => {
  try {
    req.session.destroy();
    res.clearCookie("user_sid");
    res.sendStatus(200);
  } catch (error) {
    console.log(error);
  }
});

// router.get("/useractivity/:id", async (req, res) => {
//   const { id } = req.params;
//   try {
//     // --------------------------------------------------------
//     // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ-–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
//     // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ post_id, –≥–¥–µ user = id
//     const userPostsForComments = await Post.findAll({
//       where: { user_id: id },
//       attributes: ["id"],
//     });
//     const userPostsID = userPostsForComments.map((post) => post.id);

//     // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ comment_id, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–ª –≠–ª—å–º–∞—Ä
//     const userCommentsForComments = await Comment.findAll({
//       where: { user_id: id },
//       attributes: ["id"],
//     });
//     const userCommentsID = userCommentsForComments.map((comment) => comment.id);

//     // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –µ–≥–æ –ø–æ—Å—Ç–∞–º (–ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è)
//     const commentOnPostCount = await Comment.count({
//       where: { post_id: { [Op.in]: userPostsID }, parent_id: null }, // 2
//     });

//     // –û—Ç–≤–µ—Ç—ã –Ω–∞ –µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
//     const repliesToUserCommentsCount = await Comment.count({
//       where: { parent_id: { [Op.in]: userCommentsID } },
//     });
//     const totalReply = commentOnPostCount + repliesToUserCommentsCount;

//     // –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:
//     // üîò –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º: 2
//     // üîò –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 5
//     // üîò –í—Å–µ–≥–æ: 7
//     // res.json({
//     //   replies: total,
//     //   commentOnPostCount,
//     //   repliesToUserCommentsCount,
//     // });
//     // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ-–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
//     // --------------------------------------------------------

//     // res.json(findAllComments);

//     const userPostForPostreactions = await Post.findAll({
//       where: { user_id: id },
//       include: [{ model: Postreaction, as: "Postreactions" }],
//     });
//     const userPostForPostreactionsID = userPostForPostreactions.map(
//       (reaction) => reaction.Postreactions.length
//     );

//     const userCommentForPostreactions = await Comment.findAll({
//       where: { user_id: id },
//       include: [{ model: Commentreaction, as: "reactions" }],
//     });

//     const userCommentForPostreactionsID = userCommentForPostreactions.map(
//       (reaction) => reaction.reactions.length
//     );
//     const totalReactions =
//       +userPostForPostreactionsID + +userCommentForPostreactionsID;

//     res.json({
//       replies: totalReply,
//       reactions: totalReactions,
//     });
//   } catch (error) {
//     console.log(error);
//   }
// });

router.get("/useractivity/:id", async (req, res) => {
  const { id } = req.params;
  try {
    // -----------------------------------------------------------------------
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ-–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // üîπ –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPosts = await Post.findAll({
      where: { user_id: id },
      attributes: ["id"],
      raw: true, // raw: true ‚Äî —É–±–∏—Ä–∞–µ—Ç "–æ–±—ë—Ä—Ç–∫—É" Sequelize –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã JS
    });
    const userPostsID = userPosts.map((post) => post.id);

    // üîπ –ü–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userComments = await Comment.findAll({
      where: { user_id: id },
      attributes: ["id"],
      raw: true,
    });
    const userCommentsID = userComments.map((comment) => comment.id);

    // üîπ –ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è)
    const commentOnPostCount = await Comment.count({
      where: { post_id: { [Op.in]: userPostsID }, parent_id: null },
    });

    // üîπ –ö–æ–ª-–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const repliesToUserCommentsCount = await Comment.count({
      where: { parent_id: { [Op.in]: userCommentsID } },
    });
    const totalReply = commentOnPostCount + repliesToUserCommentsCount;
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ-–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // -----------------------------------------------------------------------

    // -----------------------------------------------------------------------
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ-–≤–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // üîπ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ include)
    const userPostsWithReactions = await Post.findAll({
      where: { user_id: id },
      include: [{ model: Postreaction, as: "Postreactions", attributes: [] }],
      attributes: [
        "id",
        [
          sequelize.fn("COUNT", sequelize.col("Postreactions.id")),
          "reactionCount",
        ],
      ],
      group: ["Post.id"],
      raw: true,
    });

    const postReactionsCount = userPostsWithReactions.reduce(
      (sum, reaction) => sum + Number(reaction.reactionCount),
      0
    );

    // üîπ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userCommentsWithReactions = await Comment.findAll({
      where: { user_id: id },
      include: [{ model: Commentreaction, as: "reactions", attributes: [] }],
      attributes: [
        "id",
        [sequelize.fn("COUNT", sequelize.col("reactions.id")), "reactions"],
      ],
      group: ["Comment.id"],
      raw: true,
    });

    const commentReactionsCount = userCommentsWithReactions.reduce(
      (sum, reaction) => sum + Number(reaction.reactions),
      0
    );

    const totalReactions = postReactionsCount + commentReactionsCount;

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ-–≤–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // -----------------------------------------------------------------------
    res.json({
      replies: totalReply,
      reactions: totalReactions,
    });
  } catch (error) {
    console.log(error);
  }
});
export default router;
