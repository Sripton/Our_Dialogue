import React, { useState } from "react";

export default function Commentform({
  post,
  setShowReplies,
  setAllComments,
  replyCommentID,
  setReplyCommentID,
}) {
  const [inputsComment, setInputsComment] = useState({
    commenttitle: "",
  });
  const inputsCommentHandler = (e) => {
    setInputsComment((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };
  const submitCommentsHandler = async (e) => {
    e.preventDefault();
    if (!inputsComment.commenttitle.trim()) {
      setInputsComment({ commenttitle: "" });
      setReplyCommentID(null);
      return; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø—Ä–æc
    }
    const parentId = replyCommentID || null;
    try {
      const response = await fetch(`/api/comments/${post.id}`, {
        method: "POST",
        headers: { "Content-type": "application/json" },
        body: JSON.stringify({
          commenttitle: inputsComment.commenttitle,
          parent_id: parentId,
        }),
      });
      if (response.ok) {
        // const data = await response.json();
        // // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç–µ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞—é—Ç)
        // const formattedComment = {
        //   ...data,
        //   parentId,
        // };

        // üí° –í–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedCommentsRes = await fetch(`/api/comments/${post.id}`);
        const updatedComments = await updatedCommentsRes.json();
        setAllComments(updatedComments);
        setInputsComment({ commenttitle: "" });
        setReplyCommentID(null);
        setShowReplies(false);

        // if (parentId) {
        //   setAllComments((prevComments) =>
        //     prevComments.map((comment) =>
        //       comment.id === replyCommentID
        //         ? {
        //             ...comment,
        //             Replies: [...(comment.Replies || []), formattedComment],
        //           }
        //         : comment
        //     )
        //   );
        //   setReplyCommentID(null);
        // } else {
        //   setAllComments((prevComments) => [...prevComments, formattedComment]);
        //   setShowReplies(false);
        // }
      }
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", error);
    }
  };

  return (
    <form onSubmit={submitCommentsHandler}>
      <div id="reply-form-template" className="add-comment">
        <textarea
          name="commenttitle"
          placeholder="Write a reply..."
          value={inputsComment.commenttitle}
          onChange={inputsCommentHandler}
        ></textarea>
        <button type="submit">Post Comment</button>
      </div>
    </form>
  );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞. –ù—É–∂–Ω–æ –ª–∏ –±—ã–ª–æ –º–µ–º–æ–∏–∑–∏—Ä–æ–≤—Ç–∞—å Commentfrom.jsx
// useEffect(() => {
//   console.log("üîÅ Component MOUNTED");
// }, []);
// –≤ –∫–æ–Ω—Å–æ–ª–µ –≤—ã—à–ª–æ ->  üîÅ Component MOUNTED
// –ó–Ω–∞—á–∏—Ç Commentfrom.jsx –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
// function areEqualCommentForm(prevProps, nextProps) {
//   console.log("üîç Comparing Commentform props...");
//   const result =
//     prevProps.post === nextProps.post &&
//     prevProps.setShowReplies === nextProps.setShowReplies &&
//     prevProps.setAllComments === nextProps.setAllComments &&
//     prevProps.replyCommentID === nextProps.replyCommentID &&
//     prevProps.setReplyCommentID === nextProps.setReplyCommentID;
//   console.log("Are equal:", result);
//   return result;
// }
